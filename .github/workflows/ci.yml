name: Db-Connector CI
on: [push, pull_request]
jobs:
  composer-validate:
    name: Validate composer.json
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Validate
        run: composer validate --no-check-lock --strict

  php-cs-fixer:
    name: Lint Source
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Install PHP-CS-Fixer
        run: composer global require friendsofphp/php-cs-fixer --prefer-dist --no-progress --no-suggest

      - name: Enforce coding standards
        run: $HOME/.composer/vendor/bin/php-cs-fixer fix --config $GITHUB_WORKSPACE/.php_cs.dist --diff --diff-format udiff --dry-run

  psalm:
    name: Psalm Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Analyze Source
        run: vendor/bin/psalm -c $GITHUB_WORKSPACE/psalm.xml

  db-connector:
    name: Db-Connector
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.2', '7.3', '7.4']
    steps:
      - name: Set PHP Version
        run: sudo update-alternatives --set php /usr/bin/php${{ matrix.php-versions }}

      - name: Disable Xdebug
        run: sudo rm /etc/php/${{ matrix.php-versions }}/cli/conf.d/20-xdebug.ini

      - name: Get PHP Version
        run: |
          ver=$(php -v | grep -oP '(?<=PHP )\d.\d')
          echo "::set-output name=version::$ver"
        id: php-ver

      - name: Using PHP Version from matrix
        run: |
          echo "Runner is not using PHP Version defined in the php-versions matrix."
          php -v
          exit 1
        if: steps.php-ver.outputs.version != matrix.php-versions

      - name: Ping MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            sleep 1
          done

      - name: Test MySQL
        run: |
          mysql -h"127.0.0.1" -P${{ job.services.mysql.ports['3306'] }} -uroot -ppassword -e "SHOW DATABASES"

      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: PHPUnit
        run: vendor/bin/phpunit -c $GITHUB_WORKSPACE/phpunit.xml --coverage-text
        env:
          FUNC_TEST_ENV_FILE: .env.github
          CI_PORT: ${{ job.services.mysql.ports['3306'] }}
